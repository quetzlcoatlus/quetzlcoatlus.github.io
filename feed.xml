<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://quetzlcoatlus.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://quetzlcoatlus.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-03T20:09:59+00:00</updated><id>https://quetzlcoatlus.github.io/feed.xml</id><title type="html">quetzl.dev</title><subtitle>Alexander Lane&apos;s Portfolio Website. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">a post with plotly.js</title><link href="https://quetzlcoatlus.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2025/plotly</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">Fretboard Visualizer</title><link href="https://quetzlcoatlus.github.io/blog/2024/fretboard-visualizer/" rel="alternate" type="text/html" title="Fretboard Visualizer"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/fretboard-visualizer</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/fretboard-visualizer/"><![CDATA[<p><a href="https://github.com/quetzlcoatlus/fret_viz">Fretboard Visualizer GitHub</a></p> <p>Forked a repository that used matplotlib to generate fretboard diagrams. I made a GUI wrapper to help learn guitar :)</p>]]></content><author><name></name></author><category term="blog"/><category term="post"/><summary type="html"><![CDATA[Fretboard visualizer project post]]></summary></entry><entry><title type="html">Life as a Build Order SC2</title><link href="https://quetzlcoatlus.github.io/blog/2024/Life-as-a-Build-Order-SC2/" rel="alternate" type="text/html" title="Life as a Build Order SC2"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/Life-as-a-Build-Order-SC2</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/Life-as-a-Build-Order-SC2/"><![CDATA[<h1 id="life-as-a-starcraft-ii-build-order">Life as a Starcraft II Build Order</h1> <p>Hey reader, it’s Allie nice to feel your eyeballs! Also, feel free to ask questions or give constructive criticism. I appreciate others’ thoughts :)</p> <p>Here’s a song for today: <a href="https://youtu.be/9Vt0NBO37yI">Medicina De Amor - YouTube</a></p> <p>Starcraft II is a Real-Time Strategy game that dropped in 2010 at this point. I played the game around release and thought it was okay. I started playing again around 2023 because the hype, at least for spectatorship of the game, has resurged with popular figures like uThermal and Winter etc.</p> <p>In Starcraft II, you balance a continuous rock, paper, scissors game of offense, defense, and economy. Generally, offense is beaten by defense, defense is beaten by economy, and economy is beaten by offense. Really cool stuff!</p> <p><em>Since learning to play the game competitively (I mean simply on the ranked ladder), the concept of a “build order” in Starcraft II has been on my mind. In this post, I’ll be applying the idea of a build order to my personal routine. This is with the hope that I can create more value with my time, even over long periods.</em></p> <p><a href="https://www.blizzardguides.com/starcraft2/build-order-basics.php">Build Order Basics for Starcraft 2</a> According to blizzard guides.com:</p> <blockquote> <p>… a build order is a set of instructions on the order and timing of buildings and units you construct. The timings are usually timed by your supply count. At a set time you should have X supply, and when you have X supply you know its time to build a given building or unit. Its a set of orders and instructions.</p> <p>Figuratively, a build order is the refinement of an idea. At first you know what you want to do, but you don’t know exactly how to work it into your strategy without sacrificing too much else. You don’t know when you’ll have the <code class="language-plaintext highlighter-rouge">[resources]</code> to spare, when you need to start mining gas to time everything perfectly, and you don’t want to go into it without a plan. So you create a build order.</p> </blockquote> <p>Basically, a build order is a heuristic/guide that provides one a stepwise sequential plan of action that can be iterated or operated on to suit a need. In Starcraft II, the need for a build order is usually to make the most efficient use of limited resources and time in order to outlast your opponent.</p> <p>Important note: the build order isn’t a set of instructions to follow with no mistakes like a computer does. In the game of Starcraft II (called SC2 from here) There’s a sort of adversarial loop that you’re acting out with your opponent. Based on their reactions to your play, you might need to adapt. I believe this is the core of the fun and gameplay variety, which may not apply the same way to a “real life build order”.</p> <p>Some core ideas of a build order I’ve identified are:</p> <ul> <li>Structure - making it easier to execute and practice</li> <li>Flexibility - allows a build to be iterated on when mistakes are identified</li> </ul> <p>Here is an example of a relatively basic build order in Starcraft II which works in every matchup:</p> <table> <thead> <tr> <th>Supply Timings</th> <th>Timings</th> <th>Unit To Build</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td>13</td> <td>0:13</td> <td>Overlord</td> <td>Overlords add to your maximum supply</td> </tr> <tr> <td>17</td> <td>0:52</td> <td>Hatchery</td> <td>Natural, basically build a base/Hatchery at the mineral and gas location that you spawn near</td> </tr> <tr> <td>18</td> <td>1:08</td> <td>Extractor</td> <td>Lets you harvest vespene gas with workers from a geyser</td> </tr> <tr> <td>17</td> <td>1:15</td> <td>Spawning Pool</td> <td>Allows the production of the basic Zerg unit, the Zergling and its upgrades. Also allows a Queen to be built at the Hatchery</td> </tr> <tr> <td>19</td> <td>1:42</td> <td>Overlord</td> <td> </td> </tr> <tr> <td>20</td> <td>2:06</td> <td>Queen</td> <td>Responsible for early ground/air defense and for producing many units from each Hatchery</td> </tr> <tr> <td>20</td> <td>2:07</td> <td>Queen</td> <td> </td> </tr> <tr> <td>24</td> <td>2:08</td> <td>Zergling</td> <td>Act as scouting units and early defense</td> </tr> <tr> <td>25</td> <td>2:09</td> <td>Zergling</td> <td> </td> </tr> <tr> <td>28</td> <td>2:18</td> <td>Metabolic Boost</td> <td>Makes Zerglings infinitely more useful with a significant speed boost</td> </tr> <tr> <td>32</td> <td>2:48</td> <td>Hatchery</td> <td>Take the next closest base</td> </tr> <tr> <td>31</td> <td>2:49</td> <td>Overlord</td> <td>After this overlord, we make overlords with every batch of army units we produce so we can have room for the next batch</td> </tr> <tr> <td>31</td> <td>2:59</td> <td>Queen</td> <td> </td> </tr> <tr> <td>48</td> <td>4:03</td> <td>Baneling Nest</td> <td>Or earlier / whenever natural is saturated. Allows Zerglings to morph into powerful AOE suicide units called Banelings</td> </tr> <tr> <td>47</td> <td>4:11</td> <td>Extractor</td> <td> </td> </tr> <tr> <td>47</td> <td>4:23</td> <td>Zergling</td> <td>Round of safety lings</td> </tr> <tr> <td>62</td> <td>4:48</td> <td>Evolution Chamber x2</td> <td>Mainly allows stat upgrades for army units</td> </tr> <tr> <td>62</td> <td>4:50</td> <td>Lair</td> <td>Tech upgrade for the Hatchery, allows higher tier units</td> </tr> <tr> <td>76</td> <td>5:15</td> <td>Hatchery x2</td> <td>Macro Hatcheries - &gt; Non-stop lings</td> </tr> <tr> <td>85</td> <td>5:56</td> <td>Zerg Ground Armor Level 1, Zerg Melee Weapons Level 1</td> <td>Use Evolution Chambers for Melee and Ground armor since Zerglings and Banelings are melee units</td> </tr> <tr> <td>85</td> <td>5:58</td> <td>Centrifugal Hooks</td> <td>Faster Banelings, similar to Metabolic Boost</td> </tr> <tr> <td>85</td> <td>6:10</td> <td>Hatchery</td> <td>Fourth base</td> </tr> <tr> <td>85</td> <td>6:12</td> <td>Hatchery</td> <td>Fifth base -&gt; Keep building hatcheries as you float minerals</td> </tr> </tbody> </table> <p>This is a well-tested generalized Zergling-Baneling build by PiG, a relatively popular SC2 content creator and coach. I won’t go through each instruction of the build order, but I left notes that are more accessible for someone that hasn’t played SC2 or RTS.</p> <p>You may notice the supply timings don’t include workers (Drones for Zerg), the units responsible for your entire economy in SC2. I believe it’s expected that you’re constantly producing workers until you’ve fully saturated your bases. Building workers is what makes the supply count grow (about 1 worker every 12 seconds) when the build doesn’t tell you to make a unit that costs supply.</p> <p>In essence, implementing this build gets you, by ~6 minutes, a speedy upgraded army that you can use to smash your opponent or transition into other technology (flexible). Hopefully it’s reasonable that this is relatively easy to practice. If you mess up, you can see your replay and address weaknesses.</p> <p>That being said, how can this be applied to a real life routine? Especially when the “game” doesn’t have clear victory conditions like SC2 does?</p> <p>My victory condition is something like Eudaimonia. If I genuinely believe I tried my best and that I’ll be alright sowing these seeds for the future, that is the closest thing I can imagine to victory. For me this implies a few things:</p> <ul> <li>I’ll be proud of myself professionally</li> <li>I’ll be proud of myself personally</li> <li>I’ll be content suffering in the pursuit of self-love, life affirmation</li> </ul> <p>For the first iteration of this idea, here is a sort of build order for the beginning of the day. Time starts when I wake up.</p> <table> <thead> <tr> <th>Timings (24h)</th> <th>Conditions</th> <th>Category</th> <th>Action</th> <th>Notes</th> </tr> </thead> <tbody> <tr> <td>8:00</td> <td>If not incredibly tired</td> <td>Professional/Personal</td> <td>Get out of bed</td> <td>Obviously it varies when I go to sleep or when I wake up as well as sleep quality, not a strict timing.</td> </tr> <tr> <td>8:10</td> <td>If I feel greasy</td> <td>Professional/Personal</td> <td>Freshen up in the bathroom</td> <td>This might look like brushing my teeth, waste disposal or washing my face</td> </tr> <tr> <td>8:15</td> <td>If my dog is around</td> <td>Personal</td> <td>Take doggo outside to use the bathroom and wipe his feet coming back</td> <td>Sometimes I listen to music on my phone while walking around</td> </tr> <tr> <td>8:25</td> <td>If I need to meet people today or my body feels unclean</td> <td>Professional/Personal</td> <td>Shower, deodorant, moisturizer</td> <td> </td> </tr> <tr> <td>9:00</td> <td>If I have the mental resources to work on these</td> <td>Professional</td> <td>Algorithmic practice (LeetCode), Language learning (Farsi, ASL),<br/>Typing practice (Touch typing, VIM)</td> <td>I have a set of “dailies” that I usually do. I try not to force it in-case I hate doing it the next day. Long-term &gt; short-term</td> </tr> <tr> <td>12:00</td> <td>If I have an active project</td> <td>Professional/Personal</td> <td>Work on a project, also feed dog</td> <td>Currently it’s a romhack for Pokemon Mystery Dungeon</td> </tr> <tr> <td>15:00</td> <td>If the house isn’t fully tidy</td> <td>Personal</td> <td>Dedicated chore/space cleaning/exercise/dog play/bathroom time</td> <td>Might be dishes, laundry, vacuum, treadmill etc</td> </tr> <tr> <td>17:00</td> <td>If dinner isn’t being made</td> <td>Personal</td> <td>Plan Dinner for 19:00</td> <td> </td> </tr> <tr> <td>19:00</td> <td> </td> <td>Personal</td> <td>Eat Dinner</td> <td> </td> </tr> <tr> <td>19:30-</td> <td> </td> <td>Personal</td> <td>Do whatever</td> <td> </td> </tr> </tbody> </table> <p>Leaving that first implementation, I’ll try it out and report back soon. Surely this won’t be the same over time, especially as my responsibilities change with employment, preference, and death.</p> <p>Thanks for reading, best wishes o7 خدا حافظ !</p>]]></content><author><name></name></author><category term="blog"/><category term="post"/><summary type="html"><![CDATA[Life through the lens of a Starcraft II build order post]]></summary></entry><entry><title type="html">Lanchester’s Laws and SC2</title><link href="https://quetzlcoatlus.github.io/blog/2024/Lanchesters-Laws-and-SC2/" rel="alternate" type="text/html" title="Lanchester’s Laws and SC2"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/Lanchesters-Laws-and-SC2</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/Lanchesters-Laws-and-SC2/"><![CDATA[<h1 id="lanchesters-linear-and-square-laws-in-starcraft-ii">Lanchester’s Linear and Square Laws in Starcraft II</h1> <p>Disclaimer I’m not a mathematician (yet). This is a surface level exploration of the Lanchester laws because I think it’s cool.</p> <h2 id="brief-historical-context">Brief Historical Context</h2> <p>Devised during WWI, M. Osipov and Frederick Lanchester formulated a series of differential equations used to describe the power relationships between two opposing forces.</p> <p>Included in these differential equations are the Lanchester’s linear law (for ancient combat) and Lanchester’s square law (for modern combat with long-range weapons).</p> <h2 id="lanchesters-linear-law">Lanchester’s Linear Law</h2> <p>The linear law is the relatively simpler one of the two, so we’ll start here.</p> <p>This would be used to describe a scenario such as a Greek phalanx of weapons with spears. It is assumed that one solder only ever fights exactly one other soldier. In a series of one-vs-one battles, assuming the armies are similarly trained and equipped, will exhaust each other in a linear fashion. The implication of this is a victory for the larger army with equal losses.</p> <p>The Starcraft II scenario that I believe leverages this phenomenon is like placing a zealot in a wall against zerglings. Only 2 zerglings can fight the zealot at once, which is highly advantageous to the more densely powerful zealot. There’s less surface area for the zerglings to leverage their power in numbers. The relatively stronger zealot takes a greater number of zerglings to defeat than it would otherwise.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/D3A2i-n5ydI?si=esdkxSxvHKGNn7id" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p><br/></p> <p>There is another scenario where the linear law applies that I thought was interesting. However, I couldnt come up with a scenario in Starcraft:</p> <p>The linear law also applies to unaimed fire into an enemy-occupied territory, where both armies are firing into a target area. The law implies that two forces, occupying the same land area with the same weapons, who shoot randomly into the same geographical target area, will suffer the same rate and number of casualties until the smaller army is eliminated. The greater probability of one shot hitting the larger force is balanced by the larger force firing more shots.</p> <h2 id="lanchesters-square-law">Lanchester’s Square Law</h2> <p>Assume a scenario where two forces with firearms are engaging one another directly through aimed shooting from a distance. In this scenario, soldiers can attack multiple targets and receive fire from multiple directions. The rate of attrition is, so to speak, defined by the number of weapons shooting, basically disregarding whether there’s an obstruction between the two soldiers. I suppose this is considered “modern” due to industrialization and mass production of effective ranged weaponry.</p> <p>Lanchester found that the power of a force/army under these conditions is proportional to the square of the number of units. The square relationship is caused by each ranged weapon getting to fire their weapons with constant, sort of guaranteed value, unlike the linear phalanx or unaimed firing strategy where a significant portion of the forces aren’t making <em>effective</em>—weakening an opposing soldier—use of their weapons.</p> <p>The Lanchester’s square law provides a mathematical foundation for reasoning about why slightly larger armies can snowball a victory. It’s because as the smaller army acquires losses, it fires back less hard, leading to more losses later because it gets weaker and weaker relative to the larger opposing army. The larger army has less losses overall due to the relatively lower firepower from the initially smaller army, which enables them to retaliate with stronger attrition for longer.</p> <p>I thought it was worth noting that the square law does not apply to technological force, only numerical force. It won’t work on armies that are only partially deployed, except maybe as its own sub-battle. It also operates under the assumption that casualties accumulate over time rather than occurring all at once.</p> <p>I believe the battle between two armies can be described with these two equations (wikipedia):</p> <p>$\frac{dA}{dt} = -𝞫B$</p> <p>$\frac{dB}{dt} = -𝞪A$</p> <p>Imagine two armies. Alpha and beta represent the firepower of their respective army and A and B represent the numerical strength of their respective army. The lefthand side of the equation is the rate of loss the armies are experiencing over time. We would expect an army with higher firepower and larger population to cause more losses for a smaller army with lower firepower.</p> <p>Basic observations of the relationship:</p> <ul> <li>𝞪 = 𝞫 -&gt; same firepower, side with more soldiers at the beginning wins.</li> <li>A = B -&gt; same number of soldiers, so the army with greater firepower will win.</li> <li>A AND 𝞪 &gt; B AND 𝞫 -&gt; A’s army will win</li> <li> <p>A AND 𝞪 &lt; B AND 𝞫 -&gt; B’s army will win</p> </li> <li>If $A &gt; B$ AND $𝞪 &lt; 𝞫$ OR $A &lt; B$ AND $𝞪 &gt; 𝞫$: <ul> <li>the winning side depends on whether</li> </ul> </li> </ul> <p>$\frac{𝞫}{𝞪} &gt; (\frac{A}{B})^2$ OR $\frac{𝞫}{𝞪} &lt; (\frac{A}{B})^2$</p> <p>Basically: if $A &gt; B$ AND $𝞪 &lt; 𝞫$ then for A’s army to win, $\frac{𝞫}{𝞪} &lt; (\frac{A}{B})^2$ if $A &lt; B$ AND $𝞪 &gt; 𝞫$ then for A’s army to win, $\frac{𝞫}{𝞪} &gt; (\frac{A}{B})^2$</p> <p>In layman’s terms, the ratio of superiority in firepower needs to beat the square of the ratio of inferiority in numbers for victory. In reverse, the ratio of superiority in numbers needs to beat the square root of the ratio of inferiority in firepower.</p> <p>Essentially, the effectiveness of an army rises proportionately to the square of the number of soldiers, but linearly with fighting ability. So a larger army is potentially a higher priority than increased fighting ability. That is, making the assumptions the laws make. Even Starcraft II violates many of them.</p> <p>The best scenario I could illustrate this with in Starcraft II that I could imagine was Stalker vs Stalker battles. They have relatively long range and that comes close to fulfilling the assumption that all units can fire at all others at all times.</p> <iframe width="560" height="315" src="https://www.youtube.com/embed/QqLKogpFmNk?si=MEJamEjq0q9i0KfE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <iframe width="560" height="315" src="https://www.youtube.com/embed/H5mBT3p8riQ?si=sbPCJwEfD6WQL7tL" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe> <p><br/></p> <p>References:</p> <p><a href="https://win-vector.com/2010/09/17/lanchesters-law-why-small-advantages-swell-in-starcraft/">Lanchester’s Law: why small advantages swell in StarCraft – Win Vector LLC</a></p> <p><a href="https://en.wikipedia.org/wiki/Lanchester%27s_laws">Lanchester’s laws - Wikipedia</a></p>]]></content><author><name></name></author><category term="blog"/><category term="post"/><summary type="html"><![CDATA[Lanchester's laws and Starcraft II post]]></summary></entry><entry><title type="html">Victor Frankl Quote</title><link href="https://quetzlcoatlus.github.io/blog/2024/frankl-quote/" rel="alternate" type="text/html" title="Victor Frankl Quote"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/frankl-quote</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/frankl-quote/"><![CDATA[<blockquote> <p>In other words, what matters is to make the best of any given situation… [a view on human potential] which at its best always allows for: (1) turning suffering into a human achievement and accomplishment; (2) deriving from guilt the opportunity to change oneself for the better; and (3) deriving from life's transitoriness an incentive to take responsible action.</p> </blockquote> <blockquote> <p><cite><a href="http://www.brainyquote.com/quotes/quotes/m/marktwain163473.html">Victor Frankl</a></cite></p> </blockquote>]]></content><author><name></name></author><category term="blog"/><category term="quote"/><summary type="html"><![CDATA[Victor Frankl quote from Man's Search for Meaning]]></summary></entry><entry><title type="html">a post with image galleries</title><link href="https://quetzlcoatlus.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://quetzlcoatlus.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024 We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://quetzlcoatlus.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/tabs</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="17acb607-8630-49e7-9a4a-385ee5b3f38d" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="17acb607-8630-49e7-9a4a-385ee5b3f38d" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="af97dec2-bbc4-498d-9f89-a4d37dec085a" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="af97dec2-bbc4-498d-9f89-a4d37dec085a" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="ccf5929f-ed98-4c70-a4bd-21614cd176bd" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="ccf5929f-ed98-4c70-a4bd-21614cd176bd" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://quetzlcoatlus.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/typograms</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://quetzlcoatlus.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://quetzlcoatlus.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://quetzlcoatlus.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry></feed>